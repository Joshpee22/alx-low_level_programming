#include "lists.h"

/**
 *_strlen - return the length of a string
 *@str: string
 *Return: length
 */
int _strlen(const char *str)
{
unsigned int len = 0;

while (str[len] != '\0')
len++;
return (len);
}

/**
 *add_node - adds a new node at the beginning of a list_t list.
 *@head: linked list
 *@str: data for new node
 *Return: address of the new element, or NULL on failure
 */
list_t *add_node(list_t **head, const char *str)
{
list_t *new;

	tmp = malloc(sizeof(list_t));
	if (tmp == NULL)
	{
		return (NULL);
	}

	tmp->str = strdup(str);
	if (!tmp->str)
	{
		free(new);
		return (NULL);
	}
	p->len = _strlen_recursion(new->str);
	new->next = *head;
	*head = new;

	return (new);
}

/**
 * _strlen_recursion - returns the length of a string.
 * @s: string.
 * Return: length of @s.
 */
int _strlen_recursion(char *s)
{
	if (*s == 0)
		return (0);
	else
		return (1 + _strlen_recursion(s + 1));
}
}
